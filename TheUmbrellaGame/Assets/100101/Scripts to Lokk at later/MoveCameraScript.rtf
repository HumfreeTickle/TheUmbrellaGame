{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green150\blue149;\red68\green68\blue68;\red51\green100\blue164;
\red153\green153\blue136;\red245\green125\blue0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs24 \cf2 using\cf3  UnityEngine;\
\cf2 using\cf3  System.Collections;\
\
\cf2 public\cf3  \cf2 class\cf3  MoveCamera : \cf4 MonoBehaviour\cf3  \
\{\
	
\f1\i \cf5 // Credit to damien_oconnell from http://forum.unity3d.com/threads/39513-Click-drag-camera-movement\

\f0\i0 \cf3 	
\f1\i \cf5 // for using the mouse displacement for calculating the amount of camera movement and panning code.\

\f0\i0 \cf3 	
\f1\i \cf5 //\

\f0\i0 \cf3 	
\f1\i \cf5 // VARIABLES\

\f0\i0 \cf3 	
\f1\i \cf5 //\

\f0\i0 \cf3 	\cf2 public\cf3  \cf4 float\cf3  deadZoneRadius = \cf6 100.0f\cf3 ;\
	\
	\cf2 public\cf3  \cf4 float\cf3  turnSpeed = \cf6 4.0f\cf3 ;		
\f1\i \cf5 // Speed of camera turning when mouse moves in along an axis\

\f0\i0 \cf3 	
\f1\i \cf5 //public float panSpeed = 4.0f;		// Speed of the camera when being panned\

\f0\i0 \cf3 	
\f1\i \cf5 //public float zoomSpeed = 4.0f;		// Speed of the camera going back and forth\

\f0\i0 \cf3 	\
	\cf2 private\cf3  \cf4 Vector3\cf3  mouseOrigin;	
\f1\i \cf5 // Position of cursor when mouse dragging starts\

\f0\i0 \cf3 	
\f1\i \cf5 //private bool isPanning;		// Is the camera being panned?\

\f0\i0 \cf3 	
\f1\i \cf5 //private bool isRotating;	// Is the camera being rotated?\

\f0\i0 \cf3 	
\f1\i \cf5 //private bool isZooming;		// Is the camera zooming?\

\f0\i0 \cf3 	\
	\cf4 void\cf3  Start()\{\
		
\f1\i \cf5 //centre of screen\

\f0\i0 \cf3 		mouseOrigin = \cf2 new\cf3  \cf4 Vector3\cf3  (\cf6 514\cf3 , \cf6 101\cf3 , \cf6 0\cf3 );\
		
\f1\i \cf5 //print (Screen.width);\

\f0\i0 \cf3 		
\f1\i \cf5 //print (Screen.height);\

\f0\i0 \cf3 		
\f1\i \cf5 //these values are't giving the centre of the screen\

\f0\i0 \cf3 	\}\
\
	
\f1\i \cf5 //\

\f0\i0 \cf3 	
\f1\i \cf5 // UPDATE\

\f0\i0 \cf3 	
\f1\i \cf5 //\
\

\f0\i0 \cf3 	\cf4 void\cf3  Update () \
	\{\
		
\f1\i \cf5 // Get the left mouse button\

\f0\i0 \cf3 		
\f1\i \cf5 //if (Input.GetMouseButtonDown(0))\
//		if(true)\
//		\{\
//			// Get mouse origin\
//			//mouseOrigin = Input.mousePosition;\
//			isRotating = true;\
//		\}\
//		\

\f0\i0 \cf3 		
\f1\i \cf5 // Get the right mouse button\
//		if(Input.GetMouseButtonDown(1))\
//		\{\
//			// Get mouse origin\
//			mouseOrigin = Input.mousePosition;\
//			isPanning = true;\
//		\}\
//		\
//		// Get the middle mouse button\
//		if(Input.GetMouseButtonDown(2))\
//		\{\
//			// Get mouse origin\
//			mouseOrigin = Input.mousePosition;\
//			isZooming = true;\
//		\}\

\f0\i0 \cf3 		\

\f1\i \cf5 //		// Disable movements on button release\
//		//if (!Input.GetMouseButton(0)) isRotating=false;\
//		if (!Input.GetMouseButton(1)) isPanning=false;\
//		if (!Input.GetMouseButton(2)) isZooming=false;\
\

\f0\i0 \cf3 		
\f1\i \cf5 //print (isRotating);\

\f0\i0 \cf3 		\cf4 Vector3\cf3  mousePos = \cf4 Input\cf3 .mousePosition;\
\
		
\f1\i \cf5 // Rotate camera along X and Y axis\

\f0\i0 \cf3 		
\f1\i \cf5 //calcDistance = distance b/w centre of screen and current mouse position\

\f0\i0 \cf3 		
\f1\i \cf5 //returns true if greater than radius of dead zone\

\f0\i0 \cf3 		
\f1\i \cf5 //calcDistance function returns either true or false\

\f0\i0 \cf3 		\cf2 if\cf3  (calcDistance(mouseOrigin, mousePos))\
		\{\
			\cf4 Vector3\cf3  pos = \cf4 Camera\cf3 .main.ScreenToViewportPoint(\cf4 Input\cf3 .mousePosition - mouseOrigin);\
			\
			transform.RotateAround(transform.position, transform.right, -pos.y * turnSpeed);\
			transform.RotateAround(transform.position, \cf4 Vector3\cf3 .up, pos.x * turnSpeed);\
		\}\
		
\f1\i \cf5 /*\

\f0\i0 \cf3 		
\f1\i \cf5 // Move the camera on it's XY plane\

\f0\i0 \cf3 		\cf2 if\cf3  (isPanning)\
		\{\
			\cf4 Vector3\cf3  pos = \cf4 Camera\cf3 .main.ScreenToViewportPoint(\cf4 Input\cf3 .mousePosition - mouseOrigin);\
			\
			\cf4 Vector3\cf3  move = \cf2 new\cf3  \cf4 Vector3\cf3 (pos.x * panSpeed, pos.y * panSpeed, \cf6 0\cf3 );\
			transform.Translate(move, \cf4 Space\cf3 .Self);\
		\}\
		\
		
\f1\i \cf5 // Move the camera linearly along Z axis\

\f0\i0 \cf3 		\cf2 if\cf3  (isZooming)\
		\{\
			\cf4 Vector3\cf3  pos = \cf4 Camera\cf3 .main.ScreenToViewportPoint(\cf4 Input\cf3 .mousePosition - mouseOrigin);\
			\
			\cf4 Vector3\cf3  move = pos.y * zoomSpeed * transform.forward; \
			transform.Translate(move, \cf4 Space\cf3 .World);\
		\} */\
	\}\
\
	\cf4 bool\cf3  calcDistance(\cf4 Vector3\cf3  centre, \cf4 Vector3\cf3  point)\{\
		\cf2 if\cf3  (\cf4 Vector3\cf3 .Distance (centre, point) > deadZoneRadius) \{\
			\cf2 return\cf3  \cf4 true\cf3 ;\
		\}  \cf2 else\cf3  \{\
			\cf2 return\cf3  \cf4 false\cf3 ;\
		\}\
	\}\
\}\
}